name: Build Executable

on:
  push:
    branches: [ main ]
    tags:
      - 'v*' # Run workflow on version tags, e.g. v1.0.0
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (patch, minor, major)'
        required: true
        default: 'patch'

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install build tools
      run: |
        npm install -g @vercel/ncc
        npm install -g pkg
      
    - name: Build executable
      run: npm run build
      
    - name: Upload executable as artifact
      uses: actions/upload-artifact@v4
      with:
        name: csfloat-executable
        path: build/csfloat.exe
        
    - name: Upload README as artifact
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: README.md
      
    # Create a GitHub Release when triggered by tag or workflow_dispatch
    - name: Check if release should be created
      id: check_release
      run: |
        if [[ "${{ github.event_name }}" == "push" && "${{ startsWith(github.ref, 'refs/tags/v') }}" == "true" ]]; then
          echo "create_release=true" >> $GITHUB_OUTPUT
          echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "create_release=true" >> $GITHUB_OUTPUT
          # Generate a new version based on package.json and increment according to input
          version=$(node -p "require('./package.json').version")
          if [[ "${{ github.event.inputs.release_type }}" == "patch" ]]; then
            new_version=$(node -p "const [major, minor, patch] = '${version}'.split('.'); \`${major}.${minor}.\${parseInt(patch)+1}\`")
          elif [[ "${{ github.event.inputs.release_type }}" == "minor" ]]; then
            new_version=$(node -p "const [major, minor, patch] = '${version}'.split('.'); \`${major}.\${parseInt(minor)+1}.0\`")
          elif [[ "${{ github.event.inputs.release_type }}" == "major" ]]; then
            new_version=$(node -p "const [major, minor, patch] = '${version}'.split('.'); \`\${parseInt(major)+1}.0.0\`")
          fi
          echo "tag_name=v${new_version}" >> $GITHUB_OUTPUT
        else
          echo "create_release=false" >> $GITHUB_OUTPUT
        fi
      shell: bash
        
    # Create GitHub Release
    - name: Create Release
      if: steps.check_release.outputs.create_release == 'true'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.check_release.outputs.tag_name }}
        release_name: Release ${{ steps.check_release.outputs.tag_name }}
        draft: false
        prerelease: false
        
    # Upload executable to Release
    - name: Upload executable to Release
      if: steps.check_release.outputs.create_release == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/csfloat.exe
        asset_name: csfloat.exe
        asset_content_type: application/octet-stream
        
    # Upload README to Release
    - name: Upload README to Release
      if: steps.check_release.outputs.create_release == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./README.md
        asset_name: README.md
        asset_content_type: text/markdown